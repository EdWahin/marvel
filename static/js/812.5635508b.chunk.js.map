{"version":3,"file":"static/js/812.5635508b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='error img' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    };\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n    let imgStyle = { objectFit: 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { objectFit: 'unset' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner />;\n        case 'loading': \n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemsRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemsRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemsRefs.current[id].classList.add('char__item_selected');\n        // itemsRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { objectFit: 'cover' };\n            if (item.thumbnail.includes('image_not_available')) {\n                imgStyle = { objectFit: 'unset' };\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemsRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    // const items = renderItems(charList);\n\n    return (\n        <div className=\"char__list\">\n            {setContent(process, () => renderItems(charList), newItemLoading)}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ display: charEnded ? 'none' : '' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { objectFit: 'cover' };\n    if (thumbnail.includes('image_not_available')) {\n        imgStyle = { objectFit: 'unset' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} style={imgStyle} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics for this character'}\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\" >\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> : \r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'} >\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component='div' className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=4df5a79f3e7d26c68fa7625a98ad38d7';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offsetComics = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offsetComics}&${_apiKey}`);\r\n        return res.data.results.map(_transforComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transforComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transforComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            pageCount: comic.pageCount\r\n                ? `${comic.pageCount} pages`\r\n                : 'No information about the number of pages',\r\n            description: comic.description || 'There is no description',\r\n            language: comic.textObjects[0]?.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.length > 10 ? char.comics.items.slice(0, 10) : char.comics.items,\r\n        }\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getCharacterByName,\r\n        getAllComics,\r\n        getComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess };\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting': \r\n            return <Skeleton />;\r\n        case 'loading': \r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","Component","newItemLoading","Spinner","ErrorMessage","Error","props","charList","setCharList","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemsRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","arr","items","map","i","includes","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","type","placeholder","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","offsetComics","_transforComics","getComic","comic","title","price","prices","path","extension","pageCount","language","textObjects","slice","urls"],"sourceRoot":""}